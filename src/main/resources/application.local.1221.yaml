server.port: 8086
spring.cloud.stream:
  bindings:
    process-in-0:
      destination: ep_cp_glow_zhanw28_raw_source_1
      content-type: application/*+json
      group: group-wells   
  kafka.streams.binder:
    application-id: stream-group-wells1
    deserialization-exception-handler: sendToDlq  # logAndContinue | sendToDlq | logAndFail
    brokers: localhost:9092
    configuration:
      startOffset: latest  # earliest | latest
      retries: 2
      default:
        #'[key.serde]': org.apache.kafka.common.serialization.Serdes$ByteArraySerde
        '[key.serde]': org.apache.kafka.common.serialization.Serdes$StringSerde
        '[value.serde]': org.apache.kafka.common.serialization.Serdes$StringSerde
        #'[value.serde]': io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        #'[value.serde]': io.confluent.kafka.streams.serdes.json.KafkaJsonSchemaSerde
      '[spring.json.trusted.packages]': "*"
      '[spring.kafka.consumer.properties.spring.json.trusted.packages]': "*"
      '[schema.registry.url]': http://localhost:8081  kafka.streams.bindings:    process-in-0:   
      consumer: 
        dlqName: ep_cp_glow_1_json_zhanw28_dlq
        keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
        valueSerde: org.springframework.kafka.support.serializer.JsonSerde
        #valueSerde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde  ## test 2.Deserialization exception
    
logging: 
  file:
    name: pwssp-wires-schema-stream-application.log
    max-history: 7
    max-size: 50MB
  level:
    root: INFO
    '[com.td.pwssp.kafka.stream]': TRACE
    org:
      springframework: INFO  
  pattern:
    file: .%clr(%d{yyyy-MMM-dd HH:mm:ss.SSS}){Green} %-5level [%thread] %logger{15} - %msg%n
    console: .%clr(%d{yyyy-MMM-dd HH:mm:ss.SSS}){Green} %-5level [%thread] %logger{15} - %msg%n  